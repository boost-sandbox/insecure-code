name: boost (Prod)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'INFO'
        type: choice
        options:
        - INFO
        - DEBUG
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

jobs:
  boost_security_sast:
    name: SAST / Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install pre-scan dependencies
        run: |
          download_verify_and_unpack() {
            (curl -s -L "$1" | tee /tmp/toxic | shasum -s -a256 -c <(echo "$3  -") && tar -C  $(dirname "$2") -xzf /tmp/toxic "$4" && if [[ ! -z "$4" ]]; then mv "$(dirname $2)/$4" "$2"; else true; fi && chmod +x "$2") || (rm -f /tmp/toxic && false)
          }
          download_verify_and_unpack https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz /usr/local/bin/helm 6cd6cad4b97e10c33c978ff3ac97bb42b68f79766f1d2284cfd62ec04cd177f4 linux-amd64/helm
      - name: Prepare pre-scan script
        run: |
          cat << EOF > /usr/local/bin/render-k8s.sh
          #!/bin/bash
          helm template canaries/helm/charts/hello-world --output-dir ./generated
          EOF
          chmod +x /usr/local/bin/render-k8s.sh
      - name: Scanner
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: DEBUG
        with:
          action: scan
          additional_args: --pre-scan-command "/usr/local/bin/render-k8s.sh"
          api_token: ${{ secrets.BOOST_API_KEY_PROD }}
  brakeman:
    name: Brakeman Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Brakeman
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: brakeman
          action: exec
          additional_args: --require-full-repo
          exec_command: >
            docker run -v %CWD%:/code
              presidentbeef/brakeman
              --format sarif --force
          api_token: ${{ secrets.BOOST_API_KEY_PROD }}
  semgrep-community-rules:
    name: Semgrep - Community Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Semgrep - Auto Config
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: semgrep-auto-config
          action: exec
          exec_command: >
            docker run -v %CWD%:/src
              returntocorp/semgrep:0.94.0
              scan
              --disable-version-check --sarif
              --config auto
          api_token: ${{ secrets.BOOST_API_KEY_PROD }}
  semgrep-custom-rules:
    name: Semgrep - Custom Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Semgrep - Custom Rules
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: semgrep-custom-rules
          action: exec
          exec_command: >
            docker run -v %CWD%:/src
              returntocorp/semgrep:0.94.0
              scan
              --disable-version-check --sarif
              --config /src/.semgrep/custom-rules.yml
          api_token: ${{ secrets.BOOST_API_KEY_PROD }}
  snyk:
    name: Snyk CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Snyk CLI
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          step_name: snyk
          action: exec
          additional_args: --require-full-repo
          exec_command: >
            docker run -e SNYK_TOKEN -v %CWD%:/project --entrypoint snyk -w /project
            snyk/snyk-cli:docker
            test
            --all-projects --sarif
          api_token: ${{ secrets.BOOST_API_KEY_PROD }}
